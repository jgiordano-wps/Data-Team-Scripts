from PyQt5.QtWidgets import (
    QDialog,
    QVBoxLayout,
    QListWidget,
    QListWidgetItem,
    QPushButton,
    QLineEdit,
)
from PyQt5.QtCore import Qt

class FitmentDialog(QDialog):
    def __init__(self, parent=None, selected_items=None):
        super().__init__(parent)
        self.setWindowTitle("Select Reason for Maintenance")
        self.layout = QVBoxLayout(self)

        # Add search field
        self.search_field = QLineEdit(self)
        self.search_field.setPlaceholderText("Search...")
        self.search_field.textChanged.connect(self.filter_items)
        self.layout.addWidget(self.search_field)

        self.list_widget = QListWidget(self)
        self.layout.addWidget(self.list_widget)

        self.clear_button = QPushButton("Clear Selections", self)
        self.clear_button.setToolTip("Clear all selections")
        self.clear_button.clicked.connect(self.clear_selections)
        self.layout.addWidget(self.clear_button)

        self.ok_button = QPushButton("Apply", self)
        self.ok_button.setToolTip("Apply the selected fitment to the cell")
        self.ok_button.clicked.connect(self.accept)
        self.layout.addWidget(self.ok_button)

        # Replace the options with the provided list
        self.populate_list_widget(
            [
                "Add Replacement #",
                "Bring Prod Back to CUR",
                "Bring Prod Back to NEW",
                "Bring Prod to TUA",
                "Delete Part numbers",
                "NLP Per Vendor",
                "NLP Per Yourself",
                "Remove Description 2 (30)",
                "Remove EAN Code",
                "Remove OEM No.",
                "Remove Replacement Number",
                "Remove UPC #",
                "Supersede Part",
                "Update Amazon Item#",
                "Update Apparel Type",
                "Update Apparel Cat (Y/N)",
                "Update ATV/UTV Cat (Y/N)",
                "Update Bicycle Cat (Y/N)",
                "Update Brand",
                "Update Carb To Prohibited State Lockout",
                "Update Carb To Waiver State Carb Restriction",
                "Update Catalog Price Factor",
                "Update Color",
                "Update Commodity #",
                "Update Cost",
                "Update Country of Origin",
                "Update Dealer Map (Y/N)",
                "Update Description 1 (30)",
                "Update Description 2 (30)",
                "Update Description 3 (30)",
                "Update Dirt Cat (Y/N)",
                "Update Distributor Whse Y or Blank",
                "Update Division, Class, Sub-Class, Sub-Sub-Class",
                "Update Duty Rate",
                "Update EAN Code",
                "Update Expiration Date (Go Live Date)",
                "Update Fly Cat (Y/N)",
                "Update Freight Category 1",
                "Update Freight Category 2",
                "Update Gender",
                "Update Hazmat Code",
                "Update Height (Inches)",
                "Update HTS CODE (Tariff)",
                "Update Item Category",
                "Update Item Taxable",
                "Update Landed Cost Code",
                "Update Length (Inches)",
                "Update Lithium",
                "Update Lot Control",
                "Update Material",
                "Update Model",
                "Update MSDS Req",
                "Update OEM No.",
                "Update Dealer A & Dealer B & Retail",
                "Update Price 2 Closeout",
                "Update Price 3",
                "Update Price 5 Distributor USA",
                "Update Price 6 Distributor Asia",
                "Update Price 7",
                "Update Price 8",
                "Update Price 9 Retail Map",
                "Update Prop65 to Cancerous",
                "Update Prop65 to Cancerous Developmental",
                "Update Prop65 to Developmental",
                "Update Retail Map (Y/N)",
                "Update Round Retail (Y/N)",
                "Update Schedule B#",
                "Update Segment",
                "Update Serial Item (Y/N)",
                "Update Size",
                "Update Snow Cat (Y/N)",
                "Update State Lockout",
                "Update Stock Item",
                "Update Street Cat (Y/N)",
                "Update Style",
                "Update Sub-Segment",
                "Update Tires Cat (Y/N)",
                "Update UN#",
                "Update Unit of Measure",
                "Update UPC #",
                "Update Vendor #",
                "Update Vendor/Manufacturer Part # (20)",
                "Update V-Twin Cat (Y/N)",
                "Update Watercraft Cat (Y/N)",
                "Update Weight (LBS)",
                "Update Weight (LBS) and Dims",
                "Update Width (Inches)",
                "Update Year Design",
            ],
            selected_items,
        )

    def clear_selections(self):
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            item.setCheckState(Qt.Unchecked)

    def filter_items(self, text):
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            if text.lower() in item.text().lower():
                item.setHidden(False)
            else:
                item.setHidden(True)

        self.ok_button = QPushButton("Apply", self)
        self.ok_button.setToolTip("Apply the selected fitment to the cell")
        self.ok_button.clicked.connect(self.accept)
        self.layout.addWidget(self.list_widget)
        self.layout.addWidget(self.ok_button)

    def populate_list_widget(self, vehicles, selected_items):
        self.list_widget.clear()
        for vehicle in vehicles:
            item = QListWidgetItem(vehicle)
            item.setFlags(
                item.flags() | Qt.ItemIsUserCheckable
            )  # Make the item checkable
            item.setCheckState(Qt.Unchecked)  # Set initial check state to unchecked
            if selected_items and vehicle in selected_items:
                item.setCheckState(
                    Qt.Checked
                )  # Pre-select the item if it was previously selected
            self.list_widget.addItem(item)

    def select_all(self):
        # Iterate over all items in the QListWidget and set their check state to Qt.Checked
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            item.setCheckState(Qt.Checked)

    def selected_items(self):
        selected_items = []
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            if item.checkState() == Qt.Checked:
                selected_items.append(item.text())
        return selected_items

    def clear_all(self):
        # Iterate over all items in the QListWidget and set their check state to Qt.Unchecked
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            item.setCheckState(Qt.Unchecked)
